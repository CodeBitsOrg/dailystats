// Code generated by mockery v2.50.0. DO NOT EDIT.

package stats

import (
	stats "github.com/CodeBitsOrg/dailystats/stats"
	mock "github.com/stretchr/testify/mock"
)

// StatsProvider is an autogenerated mock type for the StatsProvider type
type StatsProvider struct {
	mock.Mock
}

type StatsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *StatsProvider) EXPECT() *StatsProvider_Expecter {
	return &StatsProvider_Expecter{mock: &_m.Mock}
}

// GetStats provides a mock function with no fields
func (_m *StatsProvider) GetStats() (stats.DailyStats, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 stats.DailyStats
	var r1 error
	if rf, ok := ret.Get(0).(func() (stats.DailyStats, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() stats.DailyStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(stats.DailyStats)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatsProvider_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type StatsProvider_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
func (_e *StatsProvider_Expecter) GetStats() *StatsProvider_GetStats_Call {
	return &StatsProvider_GetStats_Call{Call: _e.mock.On("GetStats")}
}

func (_c *StatsProvider_GetStats_Call) Run(run func()) *StatsProvider_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StatsProvider_GetStats_Call) Return(_a0 stats.DailyStats, _a1 error) *StatsProvider_GetStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StatsProvider_GetStats_Call) RunAndReturn(run func() (stats.DailyStats, error)) *StatsProvider_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatsProvider creates a new instance of StatsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatsProvider {
	mock := &StatsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
